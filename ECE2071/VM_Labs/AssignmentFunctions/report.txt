The search algorithm implemented in the provided code is a binary search tree. This will then be compared to a linear search algorithm. 

A binary search tree is a data structure that allows for efficient searching and insertion of elements. The data structure, has a pointer to a left node and a right node within it. 
The rules I implemented with this ordering are the left child node's hash comes before the parent node alphabetically and the right child node hash comes after the parent node hash. 
Due to this structure, the right and left subtree are by definition before and after alphabetically the parent node. This ordering also allows for a binary search algorithm, which limits the 
number of computational operations needed to narrow down the result. 

The main benefit of using a binary search tree is its efficiency in searching. As each search operation eliminates half of the possible search space, the worst-case time complexity for a search 
in a binary search tree is O(log n). This is significantly faster than a linear search, which has a worst-case time complexity of O(n). Binary search could also be considered more flexible than 
linear search, it allows for hierarchies of ordering to exist within the tree. The insertion and searching algorithms can then be adjusted accordingly to fit this.

A linear search is a search algorithm that checks each element in a list until a match is found. While linear search is simple and easy to implement, it can be inefficient for large lists. 
The worst-case time complexity is O(n). Linear search algorithm does not take advantage of a data's ordering therefore cannot quickly narrow down the search space as binary search does. 

The main benefit of a linear search over a binary search is that it is agnostic to the lists ordering. A binary search requires that the list or tree be in some sort of order, a linear search 
will return the correct result regardless of the lists ordering. It is also more robust with different datasets. If the data inputted into the binary search tree resulted in one subtree being 
neglected for each node (essentially a linked list), it would act as a linear search negating the benefit. It performs optimally when the left and right subtree are roughly equal in the number of nodes.

The binary search tree implemented in search.c has several merits over a linear search algorithm. The use of a binary search tree allows for efficient searching of elements. 
Additionally, as the tree follows a specific ordering, it can quickly narrow down the search space, making it significantly faster than a linear search for large datasets. While a linear search 
algorithm is simple and easy to implement, it can be inefficient for large datasets and is less flexible than a binary search tree. Therefore, if there is any exploitable structure to a dataset
binary search should be used over linear search. 