for n in range(5):
  node = graph.add_node(id=n)
graph.add_edge(graph.node(1), graph.node(4),9)
graph.add_edge(graph.node(0), graph.node(4),9)
graph.add_edge(graph.node(2), graph.node(1),9)
graph.add_edge(graph.node(2), graph.node(3),9)
graph.add_edge(graph.node(4), graph.node(3),1)
graph.add_edge(graph.node(3), graph.node(1),1)
graph.add_edge(graph.node(0), graph.node(1),1)

def FW():
    matrix = {}
    
    for n in graph.nodes():
        matrix[n] = {}
        for m in graph.nodes():
            matrix[n][m] = float("inf")
    
    for edge in graph.edges():
        matrix[edge.source()][edge.target()] = edge.weight()
        if not edge.directed():
            matrix[edge.target()][edge.source()] = edge.weight()
    
    for node in graph.nodes():
        matrix[node][node] = 0
    
    for k in graph.nodes():
        for i in graph.nodes():
            for j in graph.nodes():
                if matrix[i][j] > matrix[i][k] + matrix[k][j]:
                    matrix[i][j] = matrix[i][k] + matrix[k][j]
    
    for n in graph.nodes():
        for m in graph.nodes():
            print(n, m, matrix[n][m])
    return

FW()