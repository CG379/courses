rooms = {}
nodes = [[1,81,20], [2,137,20], [3,193,20], [4,250,20], [6,362,20], [10,81,92], [11,137,92], [12,193,92], [13,250,92], [14,306,92], [15,362,92], [17,475,92], [18,25,164], [19,81,164], [20,137,164], [21,193,164], [22,250,164], [23,306,164], [24,362,164], [25,418,164], [26,475,164], [29,137,236], [30,193,236], [31,250,236], [32,306,236], [33,362,236], [37,81,308], [38,137,308], [39,193,308], [40,250,308], [41,306,308], [46,81,380], [47,137,380], [48,193,380], [49,250,380], [50,306,380], [51,362,380]]
for n in nodes:
    new_node = graph.add_node(id =n[0])
    new_node.set_position(n[1], n[2], relative = False)
    rooms[new_node] = False

edges = [[1,10], [10,11], [11,2], [2,3], [3,4], [4,13], [13,14], [14,15], [15,6], [15,24], [24,25], [25,26], [26,17], [24,33], [33,32], [32,41], [41,50], [50,51], [11,20], [20,19], [19,18], [20,29], [29,38], [38,37], [37,46], [46,47], [38,39], [39,48], [48,49], [49,40], [39,30], [30,31], [31,22], [22,21], [21,12], [12,11], [14,23], [32,31]]
for e in edges:
    new_edge = graph.add_edge(graph.node(e[0]), graph.node(e[1]))
    #doors[new_edge] = False

start = graph.node(17)
end = graph.node(18)
# dfs(vertices, start)
# Input: The list of all vertices, and the start node.
# Output: Traverse all nodes in the graph.
# Begin
#   initially make the state to unvisited for all nodes
#   push start into the stack
#   while stack is not empty, do
#      pop element from stack and set to u
#      display the node u
#      if u is not visited, then
#         mark u as visited
#         for all nodes i connected to u, do
#            if ith vertex is unvisited, then
#               push ith vertex into the stack
#               mark ith vertex as visited
#         done
#   done
#End

# First attempt
def depthFirst(start, end):
    stack = []
    path = []
    doors = {}
    stack.append(start)
    path.append(start.id())
    atEnd = False
    i = 0
    j = 0
    while not atEnd or i == 100:
        if len(stack) == 0:
            stack.append(start)
            j += 1
        temp = stack.pop()
        adjacent = temp.incident_edges()
        if j > 0 and len(adjacent) > 1:
            adjacent.pop(j)
        for edge in adjacent:
            #print(edge.target().id())
            node = edge.other_node(temp)
            if edge in doors:
                continue
            edge.traverse(node)
            doors[edge] = True
            #rooms[node] = True
            stack.append(node)
            path.append(node.id())
            if temp == end:
                atEnd = True
            break
        pause(100)
        i += 1
    return path

# Second attempt
def dfs(start, end):
    stack = []
    path = []
    visited = {}
    stack.append(start)                  
    visited[start] = True                
    while stack:                         
        curr = stack.pop()
        path.append(curr)
        adjacent = curr.incident_edges()
        for edge in adjacent:   
            neigh = edge.other_node(curr)
            if neigh not in visited:       
                visited[neigh] = True   
                stack.append(neigh)
                edge.traverse(curr)
                if neigh == end :            
                    print("FOUND:", neigh)
                    return path

path = []
final= dfs(start,end)
for node in final:
    path.append(node.id())
print(path)
