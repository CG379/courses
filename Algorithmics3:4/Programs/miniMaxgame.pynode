# Naughts and crosses
# Tree search
# Assign value to board
# Store tree
# Chose best path

def minimax(board, depth, player):
	if player == MAX:
		best = [-1, -1, -infinity]
	else:
		best = [-1, -1, +infinity]

	if depth == 0 or game_over(board):
		score = evaluate(state)
		return [-1, -1, score]

	for cell in empty_cells(board):
		x, y = cell[0], cell[1]
		board[x][y] = player
		score = minimax(board, depth - 1, -player)
		board[x][y] = 0
		score[0], score[1] = x, y

		if player == MAX:
			if score[2] > best[2]:
				best = score
		else:
			if score[2] < best[2]:
				best = score
	return best




Max = 1
Min = 0

def makeBoard():
    board = [None for x in range(9)]
    return board

def freeSpace(board):
    space = []
    for i in range(board):
        if board[i] == None:
            space.append(i)
    return space

def win(board):
    # Row, col, diag
    if cell[0] == cell[1] == cell[2] == 'X' or cell[3] == cell[4] == cell[5] == 'X' or cell[6] == cell[7] == cell[8] == 'X' or cell[0] == cell[3] == cell[6] == 'X' or cell[1] == cell[4] == cell[7] == 'X' or cell[2] == cell[5] == cell[8] == 'X' or cell[0] == cell[4] == cell[8] == 'X' or cell[2] == cell[4] == cell[6] == 'X':
        return Max, 1
    elif cell[0] == cell[1] == cell[2] == 'O' or cell[3] == cell[4] == cell[5] == 'O' or cell[6] == cell[7] == cell[8] == '0' or cell[0] == cell[3] == cell[6] == 'O' or cell[1] == cell[4] == cell[7] == 'O' or cell[2] == cell[5] == cell[8] == 'O' or cell[0] == cell[4] == cell[8] == 'O' or cell[2] == cell[4] == cell[6] == '0':
        return Min, 0
    elif None not in board:
        return "Draw", 0.5
    return False, None

def miniMax(board, player):
    winner, value = win(board)
    if winner == "X" or winner == "O" or winner == "Draw":
        return value
    # Check for win
    space = freeSpace(board)
    for i in space:
        if player == Max:
            board[i] = "X"
            v = miniMax(board, Min)
            board[i] = None
        else:
            board[i] = "O"
            v = miniMax(board, Max)
            board[i] = None
            

def game():
    

temp = makeBoard()
miniMax(temp)