# Dynamic Programming

myList = [5,7,0,4,7,3,1,5]
n = len(myList)
'''
Goal: Pick up maximum amount of coins
Constraint: Cant pick up coins in adjacent cells to the chosen cells

the steps taken are >= 2
'''

def maxCoins(cells):
    coins = [0] * (n)
    coins[0] = 0
    coins[0] = cells[0]
    
    for i in range(1,n):
        if (coins[i-2] + cells[i]) >= coins[i-1]:
            coins[i] = coins[i-2] + cells[i]
        else:
            coins[i] = coins[i-1]
    return coins[-1]


print(maxCoins(myList))

# 5 7 0 4  7  3  1  5 
# 1 2 3 4  5  6  7  8
# 5 7 7 11 14 14 15 19

def catalan(n):
    c = [0] * n
    c[0] = 1
    for i in range(1,n):
        for j in range(i-1):
            c[i] = c[j] + (c[j] * c[i-j-1])
    return c

print(catalan(4))

weight = [10,7,15,2]
value =[100,200,120,70]
n = 22

def knapsack(weights, values, n):
    sack = [0] * (n+1)
    for w1 in range(len(weights)):
        for w2 in range(n,0,-1):
            currentW = weights[w1]
            currentV = values[w1]
            if w2 < currentW:
                sack[w2] = sack[w2 - 1]
            else:
                sack[w2] = max(sack[w2 - 1], currentV + sack[w2 - currentW])
    return sack[-1]
    
print(knapsack(weight, value, n))










