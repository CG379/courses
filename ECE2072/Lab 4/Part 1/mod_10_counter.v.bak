module mod_10_counter(
    input [2:0] SW,
    input [0:0] KEY,
    output [6:0] HEX0
);

    wire Clock, Resetn;
    wire [1:0] w;
    reg [3:0] count;

    assign Clock = ~KEY[0];
    assign Resetn = SW[0];
    assign w = SW[2:1];

    // Counter logic
    always @(posedge Clock) begin
        if (!Resetn)
            count <= 4'd0;
        else begin
            case (w)
                2'b00: count <= count;
                2'b01: count <= (count == 4'd9) ? 4'd0 : count + 4'd1;
                2'b10: count <= (count >= 4'd8) ? count - 4'd8 : count + 4'd2;
                2'b11: count <= (count == 4'd0) ? 4'd9 : count - 4'd1;
            endcase
        end
    end

    // 7-segment display decoder
    reg [6:0] seg;
    always @(*) begin
        case (count)
            4'd0: seg = 7'b1000000;
            4'd1: seg = 7'b1111001;
            4'd2: seg = 7'b0100100;
            4'd3: seg = 7'b0110000;
            4'd4: seg = 7'b0011001;
            4'd5: seg = 7'b0010010;
            4'd6: seg = 7'b0000010;
            4'd7: seg = 7'b1111000;
            4'd8: seg = 7'b0000000;
            4'd9: seg = 7'b0010000;
            default: seg = 7'b1111111;
        endcase
    end

    assign HEX0 = seg;

endmodule