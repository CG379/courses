# Algorithms SAT 2
# Water Jug problem max [9,13] must get 10

# Possible actions that can be undertaken are:
# Fill x
# Fill y
# Empty x
# Empty y
# Pour x to y
# Pour y to x

# BFS
from queue import Queue

# Max fro first jug
x = 9
# Max for second Jug
y = 13
# Final amount
z = 10

state = (0,0)

# Pouring X into Y
def pourx_y(state):
    state = [state[0], state[1]]
    while True:
        if state[0] == 0 or state[1] == y:
            break
        state[0] -= 1 
        state[1] += 1
    return tuple(state)

# Pouring Y into X
def poury_x(state):
    state = [state[0], state[1]]
    # If break statement was put as the while loop condition negative number values 
    # would be generated
    while True:
        if state[1] == 0 or state[0] == x:
            break
        state[1] -= 1
        state[0] += 1
    return tuple(state)


def waterJug(value):
    # Create empty queue and dictionary
    seenValues ={}
    # Stack could also be used in place to create a DFS
    q = Queue()
    seenValues[value] = graph.add_node(id = value)
    # Enqueue the first value
    q.put(value)
    while not q.empty():
        # Dequeue the first element on the queue and set it to current
        current = q.get()
        # Determine all posible actions that can stem from the current node
        # and add them to the list
        actions = []
        # Fill x
        actions.append((x,current[1]))
        # Fill y
        actions.append((current[0],y))
        # Empty x
        actions.append((0,current[1]))
        # Empty y
        actions.append((current[0], 0))
        # Pour X into Y
        actions.append(pourx_y(current))
        # Pour y into x
        actions.append(poury_x(current))
        # Isolates each action
        for action in actions:
            # If the value has been seen (ie. is in the graph)
            if action in seenValues:
                # If there are no edges between the seen node and the current node add one, 
                # limit to 2 edges to show back and forth possibility
                if len(graph.edges_between(graph.node(action), seenValues[current])) < 2 and graph.node(action) != seenValues[current]:
                    graph.add_edge(graph.node(action), seenValues[current], directed = True)
            # Since the action hasn't been seen enqueue it, add it to the graph
            # And mark it as a seenValue
            else:
                # Values can be put in the queue multiple times before it is seen
                # This makes sure that all possible connections are found
                q.put(action)
                node = graph.add_node(id = tuple(action))
                graph.add_edge(node, seenValues[current], directed = True)
                seenValues[tuple(action)] = node
                # If the node value contains the desired value, highlight it in red
                if action[0] == z or action[1] == z:
                    node.set_color(color=Color.RED)

waterJug(state)


    