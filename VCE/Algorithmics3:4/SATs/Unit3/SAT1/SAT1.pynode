# Represent room calls as nodes
'''
There are 2 conference rooms that can be booked in the school.
Bookings can be made starting from 8am until 5pm and can be of any duration.
There are ‘n’ number of staff including the Principal.
If the Principal makes a booking for a room, it will be assigned to her.
Staff which are Heads of Department take priority over non-Heads of Department staff 
(excluding the Principal)
Staff can request for a special event. If a special event is approved, 
then they will have priority over all other staff including the Principal.

0 for special event (assumed aproved beforehand)
1 for principal
2 for Head of department 
3 for everyone else

24h time used for simplicity
Assumed all meetings are inputed at the same time or 
the algorithm is run once all the requests are inputed
'''

startTime = 8
endTime = 17

# [Priority, Start Time in hours(minutes converted to decimal), End Time(minutes converted to decimal), 
# Inttials of name]
NoConflicts = [[3, 8, 9, "LS"],[3, 9, 10, "JR"], [2, 11.5, 12, "HW"], [3, 12, 15, "TH"], 
                [2, 15, 17, "PM"]]
# Solved through graph colouring
RoomConflicts = [[1, 8, 9, "DS"], [2, 8.5, 9, "TH"], [3, 9, 10, "JR"], [0, 9.5, 10, "HW"], 
                    [3, 10, 11.5, "LS"], [3, 10.5, 12.5, "CH"], [3, 12.5, 14, "PW"], [2, 13, 13.5, "TW"],
                    [1, 14, 15, "DS"], [3, 15, 16, "RL"], [3, 15, 16.5, "DG"], [2, 16, 17, "RG"]]
# First 4 for resolution through priority, second through appointment maximisation
Conflicts = [[1, 8, 9, "DS"], [2, 8.5, 10, "PM"], [0, 9, 10, "HW"], [3, 8.5, 9.5, "JR"],
            [0, 12, 17, "TH"],[3, 12.5, 13.5, "JR"],[3, 13, 15, "JR"],[3, 14, 15.5, "JR"]]

# Create booking to get to list format (input from user)
def makeBooking():
    bookings = []
    while True:
        event = []
        name = input("Please enter initials: ")
        response = input("Is this booking a special event? (y/n): ")
        if response.lower() == "y":
            priority = 0
        else:
            priority = input("Enter your title:\n Principal (1), Head of Department (2) or niether (3): ")
            try:
                priority = int(priority)
            except:
                print("Invalid Input")
                stop = input("Do you have more bookings? (y/n)")
                if stop.lower() == "n":
                    break
                continue
        start = input("Booking start time (hour:min in 24h time): ")
        end = input("Booking start time (hour:min in 24h time): ")
        start = start.split(":")
        start[1] = int(start[1]) / 60
        start = int(start[0]) + start[1]
        # Convert to decimal
        end = end.split(":")
        end[1] = int(end[1]) / 60
        end = int(end[0]) + end[1]
        if start < startTime or start > endTime or end < startTime or end > endTime:
            print("Invalid times, booking hours are between 8am and 5pm.")
            continue
        # Add elements to list
        event.append(priority)
        event.append(start)
        event.append(end)
        event.append(name)
        bookings.append(event)
        #Exit condition
        stop = input("Do you have more bookings? (y/n)")
        if stop.lower() == "n":
            break
    return bookings


# Priority in priority attribute
def makeGraph(requests):
    # Save the data for later
    who = {}
    for request in requests:
        node = graph.add_node(value = request[1])
        node.set_label(request[2]-request[1])
        node.set_priority(request[0])
        who[node] = request[1:]
        for n in graph.nodes():
            # Create an edge if there is overlap
            if request[1] < (n.value() + n.label()) and n.value() < request[2]  and node != n:
                if graph.edges_between(node, n):
                    continue
                graph.add_edge(node,n)
    return who

# Data structures for algorithm 
# DFS for disconnected graph
def colour():
    # Find degree of nodes more than 2
    # Identify circuits and nodes involved
    stack = []
    seen = {}
    circuits = []
    # Eliminate required node (priority or appointment maximisation)
    # Output all meetings with room assignment and list of removed meetings
    return
# [start time, end time, name, room]

choice = input("Pick which dataset you would like to use\n" 
                "NoConflicts (0), RoomConflicts (1), Conflicts (2), Custom (3): ")
if choice == "0":
    nodes = makeGraph(NoConflicts)
elif choice == "1":
    nodes = makeGraph(RoomConflicts)
elif choice == "2":
    nodes = makeGraph(Conflicts)
elif choice == "3":
    nodes = makeGraph(makeBooking())
else:
    print("Invalid Input")