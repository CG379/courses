import random
nodes = [[0,45,167], [1,208,179], [2,127,176], [3,164,252], [4,79,242], [5,117,318], [6,197,331]]
for n in nodes:
    new_node = graph.add_node(id =n[0])
    new_node.set_position(n[1], n[2], relative = False)

edges = [[0,2,7], [1,2,8], [3,1,5], [4,3,15], [3,2,7], [0,4,5], [2,4,9], [5,4,6], [5,3,8], [6,5,11], [6,3,9]]
for e in edges:
    n1 = graph.node(e[0])
    n2 = graph.node(e[1])
    weight = e[2]
    new_edge = graph.add_edge(n1, n2,weight)

def findMin(edges):
    minWeight = edges[0].weight()
    minEdge = edges[0]
    for edge in edges:
        if edge.weight() < minWeight:
            minWeight = edge.weight()
            minEdge = edge
    return minEdge

current = random.choice(graph.nodes())
edges = []
mst = []
rest = []
mst.append(current)
for node in graph.nodes():
    if node != current:
        rest.append(node)

while len(rest) > 0:
    for edge in current.outgoing_edges():
        other = edge.other_node(current)
        if other in rest:
            edges.append(edge)
    minEdge = findMin(edges)
    edges.remove(minEdge)
    current = minEdge.other_node(current)
    if current in rest:
        rest.remove(current)
        mst.append(current)
        minEdge.traverse(current)
        pause(100)
# https://careerkarma.com/blog/python-priority-queue/
# Traverse node 
# Add edges to pq
# Get smallest edge and traverse
# Check if all node traversed
