# Merge sort

def merge(left, right):
    result = []
    
    while len(left) != 0 and len(right) != 0:
        if left[0] <= right[0]:
            result.append(left.pop(0))
        else:
            result.append(right.pop(0))
    
    while len(left) != 0:
        result.append(left.pop(0))
    
    while len(right) != 0:
        result.append(right.pop(0))
    
    return result

def mergeSort(n):
    if len(n) == 1:
        return n
    
    left = n[:len(n)//2]
    right = n[len(n)//2:]
    
    left = mergeSort(left)
    right = mergeSort(right)
    
    return merge(left, right)


def partition(A, lo, hi):
    pivot = A[lo + (hi - lo)//2]
    i = lo - 1
    j = hi + 1
    while True:
        
        while True:
            i += 1
        if A[i] < pivot:
            break
        
        while True:
            j -= 1
            if A[j] > pivot:
                break
        
        if i >= j:
            return j
        temp = A[i]
        A[i] = A[j]
        A[j] = temp

def quickSort(A, lo, hi):
    if lo < hi:
        p = partition(A, lo, hi)
        quickSort(A, lo, p)
        quickSort(A, p + 1, hi)
    

list1 = [7, 5, 9, 3, 11, 3, 4, 1]

print(quickSort(list1, 0, len(list1)))