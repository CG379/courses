(* Coursera Programming Languages, Homework 3, Provided Code *)

exception NoAnswer

datatype pattern = Wildcard
		 | Variable of string
		 | UnitP
		 | ConstP of int
		 | TupleP of pattern list
		 | ConstructorP of string * pattern

datatype valu = Const of int
	      | Unit
	      | Tuple of valu list
	      | Constructor of string * valu

fun g f1 f2 p =
    let 
	val r = g f1 f2 
    in
	case p of
	    Wildcard          => f1 ()
	  | Variable x        => f2 x
	  | TupleP ps         => List.foldl (fn (p,i) => (r p) + i) 0 ps
	  | ConstructorP(_,p) => r p
	  | _                 => 0
    end

(**** for the challenge problem only ****)

datatype typ = Anything
	     | UnitT
	     | IntT
	     | TupleT of typ list
	     | Datatype of string

(**** you can put all your code here ****)


(*
string list -> string list
returns original list with only strings that start with an uppercase
*)
fun only_capitals (xs) =
    List.filter (fn x => Char.isUpper(String.sub(x,0))) xs


(*
string list -> string
returns longest string in list, no recursion
if tie return closest to front
*)
fun longest_string1 xs =
    foldl (fn (x,y) => if String.size(y) >= String.size(x) then y else x) "" xs


(*
string list -> string
returns longest string in list, no recursion
if tie return closest to back
*)
fun longest_string2 xs =
    foldl (fn (x,y) => if String.size(x) >= String.size(y) then x else y) "" xs



(*
(int * int -> bool) -> string list -> string
passed a function that returns true if the first argument is longer than the second one
*)	  
fun longest_string_helper f = foldl (fn (x,y) => if f(String.size(x), String.size(y)) then x else y) ""

val longest_string3 = longest_string_helper (fn (x,y) => x > y)

val longest_string4 = longest_string_helper (fn (x,y) => x >= y)
					    

(*
string list -> string
returns longest sting that is capitalised
*)
val longest_capitalized  = longest_string3 o only_capitals

(*
string -> string
reverses the string input
*)
val rev_string = String.implode o rev o String.explode


(*
(’a -> ’b option) -> ’a list -> ’b
takes a function and a list returns and option
*)
fun first_answer f [] = SOME []
  | first_answer f (x::xs) = case f x of
			       SOME x' => x'
				       | NONE => first_answer f xs
    
	

fun all_answers f [] = SOME []
  | all_answers f xs =
    let fun apply (n, []) = SOME n
	  | apply (n, SOME(x)::xs) = apply(n @ x, xs)
	  | apply (n, NONE::xs) = NONE
    in
	apply([], map f xs)
    end
