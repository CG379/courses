for n in range(10):
  graph.add_node(id=n)
graph.add_edge(graph.node(9), graph.node(0),14)
graph.add_edge(graph.node(0), graph.node(3),14)
graph.add_edge(graph.node(0), graph.node(2),8)
graph.add_edge(graph.node(7), graph.node(0),8)
graph.add_edge(graph.node(7), graph.node(5),8)
graph.add_edge(graph.node(4), graph.node(3),8)
graph.add_edge(graph.node(6), graph.node(3),2)
graph.add_edge(graph.node(8), graph.node(9),2)
graph.add_edge(graph.node(1), graph.node(2),2)
graph.add_edge(graph.node(2), graph.node(8),2)
graph.add_edge(graph.node(9), graph.node(3),2)
graph.add_edge(graph.node(0), graph.node(5),24)

# set current_node as the first node
# initialise an empty dictionary, visited, to keep track of nodes

# initialise a list with current_node as the only element
#   this will be our stack (the last element in the list is the 'head' of our stack)

# set the value of the current_node key in our dictionary to True (to mark it as visited)

# while there are still items in our stack
#    pop off the last element in our stack into current_node (ie. save and delete the last element in the list)
#    colourise current_node
#    for each node in current_node's adjacent nodes
#       if the node has not been flagged as visited then
#        set the value of the node key in our dictionary to True (to mark it as visited)
#        push the node onto our stack (ie. append the node to the end of our list)
#       end if
#    end for
#    pause the animation
# end while

start = graph.node(0)

def dfs(node):
    visited = {}
    stack = []
    stack.append(node)
    visited[node] = True
    while len(stack) != 0:
        current = stack.pop()
        current.set_color(color=Color.BLUE)
        for node in reversed(current.adjacent_nodes()):
            if node not in visited:
                visited[current] = True
                stack.append(node)
        pause(500)
#dfs(start)

def bfs(node):
    visited = {}
    q = []
    q.append(node)
    visited[node] = True
    while len(q) != 0:
        current = q.pop(0)
        current.set_color(color=Color.RED)
        for node in current.adjacent_nodes():
            if node not in visited:
                visited[current] = True
                q.append(node)
        pause(500)
bfs(start)