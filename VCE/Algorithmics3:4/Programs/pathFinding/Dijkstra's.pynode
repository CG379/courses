from queue import PriorityQueue

nodes = [[0,45,167], [1,208,179], [2,127,176], [3,164,252], [4,79,242], [5,117,318], [6,197,331]]
for n in nodes:
    new_node = graph.add_node(id =n[0])
    new_node.set_position(n[1], n[2], relative = False)

edges = [[0,2,7], [1,2,8], [3,1,5], [4,3,15], [3,2,7], [0,4,5], [2,4,9], [5,4,6], [5,3,8], [6,5,11], [6,3,9]]
for e in edges:
    n1 = graph.node(e[0])
    n2 = graph.node(e[1])
    weight = e[2]
    new_edge = graph.add_edge(n1, n2,weight)


def dijk(start, end):
    # (AccuDist, target-node, edge)
    seen = {}
    path = {}
    dist = {}
    pq = PriorityQueue()
    for node in graph.nodes():
        seen[node] = False
        path[node] = None
        dist[node] = float("inf")
    dist[start] = 0
    current = start
    # TODO: Smallest value in dist is inf add condition
    while current != end:
        for edge in current.incident_edges():
            if seen[edge.other_node(current)] == False:
                pq.put([dist[current] + edge.weight(), edge.other_node(current), edge])
        
        seen[current] = True
        item = pq.get()
        
        if item[0] < dist[item[1]]:
            path[item[1]] = item[2]
            dist[item[1]] = item[0]
        
        current = item[1]
    
    minPath = []
    while start != end:
        minPath = [path[end]] + minPath
        end = minPath[0].other_node(end)
    for edge in minPath:
        edge.traverse()
        pause(500)

dijk(graph.node(0), graph.node(6))