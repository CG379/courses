(* Date : int*int*int
   	  Year*month*day
*)


(* Date -> Bool
True if the first argument is older than the second
False elsewhere *)


fun is_older (d1 : int*int*int, d2 : int*int*int) =
    (#1 d1 * 365) + (#2 d1 * 30) + #3 d1 < (#1 d2 * 365) + (#2 d2 * 30) + #3 d2


(*
   listof int triple , int -> int
input date list and month returns number of dates in that month 
*) 
fun number_in_month (lsdate : (int * int * int) list, m : int) =
    if null lsdate
    then 0
    else
	let val count = number_in_month (tl(lsdate), m)
	    val current = hd (lsdate)
	in
	    if #2 current = m
	    then count + 1
	    else count
	end



(*
listof int triple , listof int -> int
input dates list  and list of month returns number of dates in the list in the list of months
assume has no repeated numbers in month list
*)
fun number_in_months (lsdate : (int * int * int) list, months : int list) =
    if null months
    then 0
    else
	let val current = hd(months)
	    val count = number_in_month(lsdate, current)
	in
	    count + number_in_months(lsdate, tl(months))
	end







(*
listof int triple , int -> listof int triple
input date list and a month return dates in that month
*)
fun dates_in_month (lsdate : (int * int * int) list, month : int) =
    if null lsdate
    then []
    else
	let val dates = dates_in_month (tl(lsdate), month)
	    val current = hd(lsdate)
	in
	    if #2 current = month
	    then current::dates
	    else dates
	end


(*
listof int triple , listof int  -> listof int triple
input date list and a list of months return dates in that list of months
*)
fun dates_in_months (lsdate : (int * int * int) list, months : int list) =
    if null months
    then []
    else
	let val all_dates = dates_in_months (lsdate, tl(months))
	    val month_dates = hd (dates_in_month (lsdate, hd(months)))
	in
	    month_dates::all_dates
	end


(*
Listof string , int -> string
returns the nth string in the list
assume list length >= n
*)
fun get_nth (ls : string list, n : int) =
    if n = 1
    then hd (ls)
    else
	get_nth(tl(ls), n-1)
    


(*
date -> string
input date return date in word form
Have to use american month/day/year smh
Assume input is date
Int.toString
^ concatonating strings

*)
fun date_to_string (date : int*int*int) =
    let
	val months = ["January","Febuary","March","April","May","June",
		      "July","August","September","October","November","December"]
	val month = get_nth (months, #2 date)
	val year = #1 date
	val day = #3 date
    in
    
	month^" "^Int.toString(day)^", "^Int.toString(year)
    end
	


(*
listof int, int -> int
all positive numbers
first n elements summed  < sum < first n + 1 elements summed
*)
fun number_before_reaching_sum (sum : int, ls: int list) =
    let
	fun counter (s: int, l: int list, count : int) =
	    if s <= 0
	    then count - 1
	    else
		counter(s - hd(l), tl(l), count + 1)
    in
	counter(sum, ls, 0)
    end	 

(*
int -> string
day of the year returns month it is in
assumes not a leap year
*)
fun what_month (day: int) =
    let val monthLength = [31,28,31,30,31,30,31,31,30,31,30,31]
    in
	number_before_reaching_sum (day, monthLength) + 1
    end
(* need to fix and above func*)

(*
int , int -> listof int
intput two days of the year return [m1,m2,...,mn] where m1 = month of day1,
 m2 = month of day1+1, ..., and mn = month of day day2
Assumes inputs > 1
*)
fun month_range ( day1: int, day2: int) =
    if day1 > day2 orelse day1 = day2
    then []
    else
	let
	    fun listMaker (day: int, ls: int list) =
		if day = day1
		then what_month(day1)::ls
		else
		    listMaker(day - 1, what_month(day)::ls)
	in
	    listMaker(day2, [])
	end


(*
listof dates -> option
inputs a list of dates returns the oldest date in the list
*)
fun oldest (dates : (int * int * int) list) =
    if null dates
    then NONE
    else
	let
	    fun getOld (lsdate: (int * int * int) list) =
		if null (tl (lsdate))
		then hd (lsdate)
		else
		    let val date = getOld (tl (lsdate))
		    in
			if is_older(hd(lsdate), date)
			then hd(lsdate)
			else date
		    end
	in
	    SOME (getOld(dates))
	end

