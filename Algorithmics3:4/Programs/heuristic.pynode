import random

num_nodes = 7

weights = [30, 39, 16, 32, 25, 27, 46, 44, 16, 42, 15, 49, 15, 46, 16, 18, 33, 19, 18, 44, 11, 49, 42, 47, 33, 41, 47, 20, 13, 18, 14, 42, 13, 50, 18, 39]

for _ in range(num_nodes):
    graph.add_node()
    
nodes = list(graph.nodes())

for n in range(len(nodes) - 1):
    for m in range(n + 1, len(nodes)):
        e = graph.add_edge(n, m)
        e.set_weight(weights[0])
        weights.pop(0)

nodes = graph.nodes()
# Random solution
def random():
    num = []
    for i in range(num_nodes):
        num.append(i)
    path = []
    while len(num) != 0:
        rand = random.randint(0, num_nodes - 1)
        if rand in num:
            path.append(nodes[rand])
            num.remove(rand)
    return path
test = random()



def cost(path):
    edges = []
    edges.append(path[0].incident_edges())
    path.pop()
    while len(path) != 0:
        temp = path[0].incident_edges()
        for i in temp:
            if i not in edges:
                edges.append(i)
    cost = 0
    print(edges)
    for edge in edges[0]:
        cost += edge.weight()
    return cost


# Iterative improvement solution
def improve(path):
    # Select range
    r1 = randint(0, num_nodes - 1)
    r2 = randint(0, num_nodes - 2)
    while r1 == r2:
        r2 = randint(0, num_nodes - 1)
    # Select sub path
    subPath = []
    if r1 < r2:
        for i in range(r1, r2):
            subPath.append(nodes[i])
    else: 
        for i in range(r2, r1):
            subPath.append(nodes[i])
    # Randomly change sub-path
    minCost = cost(subPath)
    amount = float("inf")
    while True:
        subPath.shuffle()
        amount = cost(subPath)
        if minCost > amount:
            minCost = amount
            break

print(improve(test))
    # Output improved path


# Simulated Annealing solution
# ? brute force